/**
 * 
 */
package org.asd.kyros.server.alpha;

import org.asd.kyros.shared.alpha.CreateIDCDepartmentPermission;
import org.asd.kyros.shared.alpha.IDCDepartmentFormData;
import org.asd.kyros.shared.alpha.IIDCDepartmentService;
import org.asd.kyros.shared.alpha.ReadIDCDepartmentPermission;
import org.asd.kyros.shared.alpha.UpdateIDCDepartmentPermission;
import org.eclipse.scout.commons.exception.ProcessingException;
import org.eclipse.scout.commons.exception.VetoException;
import org.eclipse.scout.rt.shared.TEXTS;
import org.eclipse.scout.rt.shared.services.common.security.ACCESS;
import org.eclipse.scout.service.AbstractService;

/**
 * @author AndrewL
 */
public class IDCDepartmentService extends AbstractService implements IIDCDepartmentService {

  @Override
  public IDCDepartmentFormData create(IDCDepartmentFormData formData) throws ProcessingException {
    if (!ACCESS.check(new CreateIDCDepartmentPermission())) {
      throw new VetoException(TEXTS.get("AuthorizationFailed"));
    }
    //TODO [AndrewL] business logic here.
    return formData;
  }

  @Override
  public IDCDepartmentFormData load(IDCDepartmentFormData formData) throws ProcessingException {
    if (!ACCESS.check(new ReadIDCDepartmentPermission())) {
      throw new VetoException(TEXTS.get("AuthorizationFailed"));
    }
    //TODO [AndrewL] business logic here.
    return formData;
  }

  @Override
  public IDCDepartmentFormData prepareCreate(IDCDepartmentFormData formData) throws ProcessingException {
    if (!ACCESS.check(new CreateIDCDepartmentPermission())) {
      throw new VetoException(TEXTS.get("AuthorizationFailed"));
    }
    //TODO [AndrewL] business logic here.
    return formData;
  }

  @Override
  public IDCDepartmentFormData store(IDCDepartmentFormData formData) throws ProcessingException {
    if (!ACCESS.check(new UpdateIDCDepartmentPermission())) {
      throw new VetoException(TEXTS.get("AuthorizationFailed"));
    }
    //TODO [AndrewL] business logic here.
    return formData;
  }
}
